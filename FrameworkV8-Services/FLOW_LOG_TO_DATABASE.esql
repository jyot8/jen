
CREATE COMPUTE MODULE "FLOW_LOG_TO_DATABASE_LOGGING"
CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
SET OutputRoot = InputRoot;
-- Enter SQL below this line.  SQL above this line might be regenerated, causing any modifications to be lost.


--Declare counters

DECLARE MSGCOUNT INTEGER;
DECLARE CHARCOUNT INTEGER;
DECLARE MSG_ID_ITG CHARACTER;
DECLARE MSG_ID_RTG CHARACTER;
DECLARE ST_TIME TIMESTAMP;
DECLARE E_TIME TIMESTAMP;

DECLARE TEST INTEGER;

IF ((InputRoot.XML.Message.Keyvalues.LOG_LEVEL_INTEGRATION >= '3') OR       -- if loglevel >= 3 then don't save
    (InputRoot.XML.Message.Keyvalues.LOG_LEVEL_ROUTING >= '3')) THEN
ELSE

    SET MSG_ID_ITG = trim(coalesce(InputRoot.XML.Message.IB.Logvalues.LOGGING.MESSAGE_ID_INTEGRATION,
							cast(trim(trailing X'00' from InputRoot.MQMD.CorrelId) as char CCSID 819 ENCODING MQENC_NATIVE))) ; 
	IF LENGTH(MSG_ID_ITG) > 24 THEN
		SET MSG_ID_ITG = SUBSTRING(MSG_ID_ITG FROM 1 FOR 24);
	END IF;
    SET MSG_ID_RTG = ' '; 
    SET ST_TIME = coalesce(InputRoot.XML.Message.IB.Logvalues.LOGGING.START_TIME, CURRENT_TIMESTAMP) ;
    SET E_TIME = coalesce(InputRoot.XML.Message.LogTime, CURRENT_TIMESTAMP);

    IF InputRoot.XML.Message.LoggingIndex = 0 THEN
       SET MSGCOUNT = InputRoot.XML.Message.IB.Logvalues.LOGGING.MESSAGE_OUT_COUNT ;
       SET CHARCOUNT = InputRoot.XML.Message.IB.Logvalues.LOGGING.CHARACTER_OUT_COUNT ;
    ELSE
       SET MSG_ID_RTG = coalesce(InputRoot.XML.Message.OB.Logvalues.LOGGING.MESSAGE_ID_ROUTING, ''); 
       SET MSGCOUNT = InputRoot.XML.Message.OB.Logvalues.LOGGING.MESSAGE_OUT_COUNT  ;
       SET CHARCOUNT = InputRoot.XML.Message.OB.Logvalues.LOGGING.CHARACTER_OUT_COUNT ; 
    END IF;

    IF MSGCOUNT < 1 THEN
       SET MSGCOUNT = 1;
    END IF;


-- QUERY database.EAI.LOGGING

SET Environment.MS[] = 
  (
  SELECT
    V.MESSAGE_ID_ROUTING, 	
    V.MESSAGE_OUT_COUNT, 
    V.CHARACTER_OUT_COUNT
    FROM Database.EAI.LOGGING AS V
    WHERE
     V.SENDER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_INTEGRATION AND  
     V.SENDER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_CODE_INTEGRATION AND 
     V.RECEIVER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_INTEGRATION AND
     V.RECEIVER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_INTEGRATION AND
     V.MESSAGE_TYPE_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_INTEGRATION AND
     V.MESSAGE_VERSION_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_INTEGRATION AND
     V.MESSAGE_ID_INTEGRATION= MSG_ID_ITG AND
     V.COMPANY_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.COMPANY_CODE_INTEGRATION AND
 
     V.SENDER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_ROUTING AND  
     V.SENDER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_CODE_ROUTING AND 
     V.RECEIVER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_ROUTING AND
     V.RECEIVER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_ROUTING AND
     V.MESSAGE_TYPE_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_ROUTING AND
     V.MESSAGE_VERSION_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_ROUTING AND
     V.COMPANY_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.COMPANY_CODE_ROUTING AND

     V.START_TIME =ST_TIME);

-- do we have an existing record...
 
DECLARE C INTEGER; 
SET C = CARDINALITY(Environment.MS[]);


IF C < 1 THEN           -- Not found, insert
-- INSERT
 
  INSERT INTO Database.EAI.LOGGING
   (SENDER_QUALIFIER_INTEGRATION,    
    SENDER_CODE_INTEGRATION,   
    RECEIVER_QUALIFIER_INTEGRATION, 
    RECEIVER_CODE_INTEGRATION,  
    MESSAGE_TYPE_INTEGRATION,    
    MESSAGE_VERSION_INTEGRATION, 
    MESSAGE_ID_INTEGRATION,
    COMPANY_CODE_INTEGRATION,
    LOG_LEVEL_INTEGRATION,
 
    SENDER_QUALIFIER_ROUTING,        
    SENDER_CODE_ROUTING,      
    RECEIVER_QUALIFIER_ROUTING,     
    RECEIVER_CODE_ROUTING,      
    MESSAGE_TYPE_ROUTING,     
    MESSAGE_VERSION_ROUTING,   
    MESSAGE_ID_ROUTING, 
    COMPANY_CODE_ROUTING,
    LOG_LEVEL_ROUTING,
 
    MESSAGE_OUT_COUNT, 
    CHARACTER_OUT_COUNT,
    ERROR_CODE,
    ERROR_MESSAGE,
    START_TIME,
    END_TIME,
    KEY_INTEGRATION,
    KEY_ROUTING
)
 values
   (InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_INTEGRATION ,    
    InputRoot.XML.Message.Keyvalues.SENDER_CODE_INTEGRATION ,   
    InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_INTEGRATION ,
    InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_INTEGRATION ,
    InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_INTEGRATION ,
    COALESCE(InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_INTEGRATION, ' ') ,
    MSG_ID_ITG,
    COALESCE(InputRoot.XML.Message.Keyvalues.COMPANY_CODE_INTEGRATION, ' '), 
    COALESCE(InputRoot.XML.Message.Keyvalues.LOG_LEVEL_INTEGRATION, 0), 

    InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_ROUTING ,    
    InputRoot.XML.Message.Keyvalues.SENDER_CODE_ROUTING ,   
    InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_ROUTING ,
    InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_ROUTING ,
    InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_ROUTING ,
    COALESCE(InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_ROUTING, ' ') ,
    MSG_ID_RTG,
    COALESCE(InputRoot.XML.Message.Keyvalues.COMPANY_CODE_ROUTING, ' ' ),
    COALESCE(InputRoot.XML.Message.Keyvalues.LOG_LEVEL_ROUTING, 0) ,
    COALESCE(MSGCOUNT, 0) , 
    COALESCE(CHARCOUNT, 0) ,
	COALESCE(InputRoot.XML.Message.ERROR_CODE, ' ' ),
	COALESCE(InputRoot.XML.Message.ERROR_MESSAGE, ' ' ),
    ST_TIME,
    E_TIME,
    InputRoot.XML.Message.Keyvalues.KEY_INTEGRATION,
    InputRoot.XML.Message.Keyvalues.KEY_ROUTING
    );
ELSE                -- Record found, update it
-- UPDATE
 
   SET MSGCOUNT = Environment.MS[C].MESSAGE_OUT_COUNT + MSGCOUNT;
   SET CHARCOUNT = Environment.MS[C].CHARACTER_OUT_COUNT + CHARCOUNT;

   UPDATE Database.EAI.LOGGING AS V
     SET MESSAGE_ID_ROUTING = MSG_ID_RTG,
         MESSAGE_OUT_COUNT =  MSGCOUNT,
         CHARACTER_OUT_COUNT =  CHARCOUNT,
         END_TIME  =  E_TIME
     WHERE
     V.SENDER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_INTEGRATION AND  
     V.SENDER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_CODE_INTEGRATION AND 
     V.RECEIVER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_INTEGRATION AND
     V.RECEIVER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_INTEGRATION AND
     V.MESSAGE_TYPE_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_INTEGRATION AND
     V.MESSAGE_VERSION_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_INTEGRATION AND
     V.MESSAGE_ID_INTEGRATION= MSG_ID_ITG AND
     V.COMPANY_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.COMPANY_CODE_INTEGRATION AND
 
     V.SENDER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_ROUTING AND  
     V.SENDER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_CODE_ROUTING AND 
     V.RECEIVER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_ROUTING AND
     V.RECEIVER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_ROUTING AND
     V.MESSAGE_TYPE_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_ROUTING AND
     V.MESSAGE_VERSION_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_ROUTING AND
     V.COMPANY_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.COMPANY_CODE_ROUTING AND

     V.START_TIME = ST_TIME;
    END IF;
END IF;

RETURN true;
END;

END MODULE;
CREATE COMPUTE MODULE "FLOW_LOG_TO_DATABASE_CUMULATIVE LOGGING"
CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
-- Enter SQL below this line.  SQL above this line might be regenerated, causing any modifications to be lost.

--Declare counters

DECLARE MSGCOUNT INTEGER;
DECLARE CHARCOUNT INTEGER;
DECLARE MSGCOUNT_OUT INTEGER;
DECLARE DATE1    DATE;
DECLARE DURATION INTEGER;
DECLARE TIMESTAMP1 TIMESTAMP;

SET DURATION = InputRoot.XML.Message.Duration;
SET TIMESTAMP1  = InputRoot.XML.Message.IB.Logvalues.LOGGING.START_TIME;
SET DATE1   = TIMESTAMP1;

IF InputRoot.XML.Message.LoggingIndex = 0 THEN
   SET MSGCOUNT = InputRoot.XML.Message.IB.Logvalues.LOGGING.MESSAGE_OUT_COUNT  ;
   SET CHARCOUNT = InputRoot.XML.Message.IB.Logvalues.LOGGING.CHARACTER_OUT_COUNT ; 
ELSE 
   SET MSGCOUNT = InputRoot.XML.Message.OB.Logvalues.LOGGING.MESSAGE_OUT_COUNT  ;
   SET CHARCOUNT = InputRoot.XML.Message.OB.Logvalues.LOGGING.CHARACTER_OUT_COUNT ; 
END IF;

-- Query logdatabase

SET Environment.MW[] = 
  (
  SELECT	
     V.CUMULATIVE_MESSAGE_COUNT_OUT, 
     V.CUMULATIVE_MESSAGE_COUNT_IN, 
     V.CUMULATIVE_CHARACTER_COUNT_OUT,
     V.DURATION_TIME	
    FROM Database.EAI.CUMULATIVE_LOGGING AS V
    WHERE
     V.SENDER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_INTEGRATION AND  
     V.SENDER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_CODE_INTEGRATION AND 
     V.RECEIVER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_INTEGRATION AND
     V.RECEIVER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_INTEGRATION AND
     V.MESSAGE_TYPE_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_INTEGRATION AND
     V.MESSAGE_VERSION_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_INTEGRATION AND
     V.COMPANY_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.COMPANY_CODE_INTEGRATION AND
 
     V.SENDER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_ROUTING AND  
     V.SENDER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_CODE_ROUTING AND 
     V.RECEIVER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_ROUTING AND
     V.RECEIVER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_ROUTING AND
     V.MESSAGE_TYPE_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_ROUTING AND
     V.MESSAGE_VERSION_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_ROUTING AND
     V.COMPANY_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.COMPANY_CODE_ROUTING AND

     V.CUMULATIVE_LOGGING_DATE =  DATE1);

-- search for a matching record...
 
DECLARE C INTEGER; 
SET C = CARDINALITY(Environment.MW[]);

IF C < 1 THEN           -- not found, insert new
-- INSERT
  INSERT INTO Database.EAI.CUMULATIVE_LOGGING
   (SENDER_QUALIFIER_INTEGRATION,    
    SENDER_CODE_INTEGRATION,   
    RECEIVER_QUALIFIER_INTEGRATION, 
    RECEIVER_CODE_INTEGRATION,  
    MESSAGE_TYPE_INTEGRATION,    
    MESSAGE_VERSION_INTEGRATION,
    COMPANY_CODE_INTEGRATION,
 
    SENDER_QUALIFIER_ROUTING,        
    SENDER_CODE_ROUTING,      
    RECEIVER_QUALIFIER_ROUTING,     
    RECEIVER_CODE_ROUTING,      
    MESSAGE_TYPE_ROUTING,     
    MESSAGE_VERSION_ROUTING,
    COMPANY_CODE_ROUTING,
   
    CUMULATIVE_LOGGING_DATE,

    CUMULATIVE_MESSAGE_COUNT_OUT,   
    CUMULATIVE_MESSAGE_COUNT_IN, 
    CUMULATIVE_CHARACTER_COUNT_OUT,
    DURATION_TIME) 
 values
   (InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_INTEGRATION ,    
    InputRoot.XML.Message.Keyvalues.SENDER_CODE_INTEGRATION ,   
    InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_INTEGRATION ,
    InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_INTEGRATION ,
    InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_INTEGRATION ,
    InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_INTEGRATION ,
    InputRoot.XML.Message.Keyvalues.COMPANY_CODE_INTEGRATION,
    InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_ROUTING ,    
    InputRoot.XML.Message.Keyvalues.SENDER_CODE_ROUTING ,   
    InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_ROUTING ,
    InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_ROUTING ,
    InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_ROUTING ,
    InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_ROUTING ,
    InputRoot.XML.Message.Keyvalues.COMPANY_CODE_ROUTING,
    DATE1,
    1,  
    MSGCOUNT,  
    CHARCOUNT,
    DURATION
    );

ELSE                -- record exists, perform update
-- UPDATE
 
   SET MSGCOUNT_OUT = Environment.MW[C].CUMULATIVE_MESSAGE_COUNT_OUT + 1; 
   SET MSGCOUNT = Environment.MW[C].CUMULATIVE_MESSAGE_COUNT_IN + MSGCOUNT;
   SET CHARCOUNT = Environment.MW[C].CUMULATIVE_CHARACTER_COUNT_OUT + CHARCOUNT;
   SET DURATION  = Environment.MW[C].DURATION_TIME + DURATION;

   UPDATE Database.EAI.CUMULATIVE_LOGGING AS V
     SET CUMULATIVE_MESSAGE_COUNT_OUT =  MSGCOUNT_OUT,
         CUMULATIVE_MESSAGE_COUNT_IN =  MSGCOUNT,
         CUMULATIVE_CHARACTER_COUNT_OUT =  CHARCOUNT,
         DURATION_TIME  =  DURATION
     WHERE
       V.SENDER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_INTEGRATION AND    
       V.SENDER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.SENDER_CODE_INTEGRATION AND   
       V.RECEIVER_QUALIFIER_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_INTEGRATION AND
       V.RECEIVER_CODE_INTEGRATION= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_INTEGRATION AND
       V.MESSAGE_TYPE_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_INTEGRATION AND
       V.MESSAGE_VERSION_INTEGRATION= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_INTEGRATION AND
 
       V.SENDER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_QUALIFIER_ROUTING AND    
       V.SENDER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.SENDER_CODE_ROUTING AND   
       V.RECEIVER_QUALIFIER_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_QUALIFIER_ROUTING AND
       V.RECEIVER_CODE_ROUTING= InputRoot.XML.Message.Keyvalues.RECEIVER_CODE_ROUTING AND
       V.MESSAGE_TYPE_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_TYPE_ROUTING AND
       V.MESSAGE_VERSION_ROUTING= InputRoot.XML.Message.Keyvalues.MESSAGE_VERSION_ROUTING AND

       V.CUMULATIVE_LOGGING_DATE =  DATE1;

END IF;

RETURN true;
END;

END MODULE;

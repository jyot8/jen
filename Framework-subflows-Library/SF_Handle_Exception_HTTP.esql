CREATE FILTER MODULE SF_Handle_Exception_HTTP_Fault_Message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		Declare soap NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
		
		-- check if fault message
		RETURN Cardinality(Root.XMLNS.{soap}:Fault[]) > 0;
		
	END;

END MODULE;


CREATE COMPUTE MODULE SF_Handle_Exception_HTTP_Format_Exception_Message
	
	-- A system exception message needs to be created from the message and ESQL exception data.
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		Declare outRef Reference to InputLocalEnvironment; -- shortcut to output message
		Declare inRef  Reference To OutputLocalEnvironment;
		Declare errorCode CHAR '';
		Declare continueLoop BOOLEAN;		
		-- Additional information for better codes (Jayanta, March 2014)
		DECLARE vExceptionLabel		CHARACTER '';	-- Node name where Error Occured
		DECLARE vPath 				CHARACTER '';	-- Current path within the exception list
		DECLARE vExceptionType 		CHARACTER 'UNKNOWN';   -- Type of exception
		DECLARE vString				CHARACTER '';   -- Temp string
		
		DECLARE Terminal CHAR;
		DECLARE MessageID CHAR;
		DECLARE CHAR_ID CHAR;
		DECLARE CHAR_ID_Pad CHAR;
		DECLARE MQSourceQueue CHAR;
		DECLARE Pad_String CHAR;
		DECLARE InProps REFERENCE To InputProperties;
		DECLARE inMessage REFERENCE To InputRoot.XMLNSC;
		DECLARE ExcepRef REFERENCE To InputExceptionList;
				
		DECLARE MessageId 		BLOB;
		DECLARE dRandom			DECIMAL;
		DECLARE sRandom			CHAR;		
		
		IF InputRoot.MQMD.MsgId IS NOT NULL THEN
			SET MessageId = InputRoot.MQMD.MsgId;
			SET MQSourceQueue = InputRoot.MQMD.SourceQueue;
			CALL CopyEntireMessage();
			SET OutputExceptionList = NULL;
		ELSE				
			-- Build a new message id 
			SET CHAR_ID = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmssSSSSSS');
			SET dRandom = CAST(1000000 * (RAND() + 1) AS DECIMAL FORMAT '#######.##');
			SET sRandom = SUBSTRING(CAST(dRandom AS CHAR) FROM 1 FOR 7) || 'xxxxxxxxxxxxxxxxx'; 
			SET CHAR_ID_Pad = CHAR_ID || SUBSTRING(sRandom FROM 1 FOR (24 - LENGTH(CHAR_ID)));		
			SET MessageId = CAST(CHAR_ID_Pad AS BLOB CCSID 850);		

			SET MQSourceQueue = SQL.MessageFlowLabel;
			IF POSITION('.' IN MQSourceQueue) > 0 THEN
				SET MQSourceQueue = SUBSTRING(MQSourceQueue FROM POSITION('.' IN MQSourceQueue) + 1);
			END IF;			
			SET MQSourceQueue = SUBSTRING(UPPER(MQSourceQueue) || '_HTTP_INPUT' FROM 1 FOR 48);		
		
			-- SOAP/HTTP origin messages will not have been backed out to SYS_FAILURE
			-- Need to put the original SOAP message to the SYS_FAILURE queue with a message ID
			-- Build up an 'MQ' message			
			SET OutputRoot.Properties = InProps;
       	 	SET OutputRoot.Properties.ReplyProtocol = 'MQ';
  			SET OutputRoot.Properties.ContentType VALUE = NULL;
			CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD' NAME 'MQMD';
		
			-- If we have a message ID in the header use it, if not create one.
			SET OutputRoot.MQMD.MsgId = MessageId;
		
			SET OutputRoot.MQMD.SourceQueue = MQSourceQueue;
			SET OutputRoot.MQMD.Format = MQFMT_STRING;            
			
			MOVE inMessage TO InputRoot.XMLNSC;
			IF LASTMOVE(inMessage) THEN
				CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'XMLNSC' NAME 'XMLNSC';
				SET OutputRoot.XMLNSC = inMessage;
			ELSE
				MOVE inMessage TO InputRoot.ComIbmAggregateReplyBody;
				IF LASTMOVE(inMessage) THEN
					CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'XMLNSC' NAME 'XMLNSC';
					SET OutputRoot.XMLNSC.ComIbmAggregateReplyBody = inMessage;
				ELSE					
					MOVE inMessage TO InputRoot.BLOB.BLOB;
					IF LASTMOVE(inMessage) THEN
						CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'BLOB' NAME 'BLOB';
						SET OutputRoot.BLOB.BLOB = inMessage;
					ELSE
						CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'XMLNSC' NAME 'XMLNSC';
						SET OutputRoot.XMLNSC.BodyContent = 'UNKNOWN';
					END IF;
				END IF;
			END IF;
		END IF;	
			
		SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData.queueName = 'SYS_FAILURE';	
	
		SET Terminal = 'out';

		PROPAGATE TO TERMINAL Terminal;
			
		-- Create new output message with message ID matching that in message put to SYS_FAILURE
		IF InputRoot.MQMD.MsgId IS NOT NULL THEN
			CALL CopyMessageHeaders();
		ELSE
			SET OutputRoot.Properties = InProps;
        	SET OutputRoot.Properties.ReplyProtocol = 'MQ';
  			SET OutputRoot.Properties.ContentType VALUE = NULL;
			CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD' NAME 'MQMD';
		
			SET OutputRoot.MQMD.SourceQueue = MQSourceQueue;
			SET OutputRoot.MQMD.Format = 'MQSTR';
		
			SET OutputRoot.MQMD.MsgId = MessageId;
		
		END IF;
				
		Create Field OutputRoot.XML.(XML.XmlDecl)XML;
		Set OutputRoot.XML.(XML.XmlDecl).(XML.Version)    = '1.0'; 
		Set OutputRoot.XML.(XML.XmlDecl).(XML."Encoding") = 'UTF-8';
		
		
		Create LastChild Of OutputRoot.XML As outRef Name 'exceptionReport';
		Set outRef.queuedetails.queueName = MQSourceQueue;-- Defect 44590
				
		Set continueLoop = TRUE;
		Move inRef to InputExceptionList;

		-- Check if Label name is available
		IF (inRef.RecoverableException.Label IS NOT NULL) THEN
				SET vExceptionLabel = inRef.RecoverableException.Label;
		END IF;
		SET vPath = 'InputExceptionList.[1]';		
		
		-- Move to the last RecoverableException branch of InputExceptionList
		WHILE continueLoop DO
			If CARDINALITY(inRef.RecoverableException[]) = 0 Then
				Set continueLoop = FALSE;
				IF (EVAL( 'FIELDNAME(' || vPath || ') IS NOT NULL' )) THEN
					SET vString = EVAL( 'FIELDNAME(' || vPath || ')' );
					IF (LENGTH(vString) > 0 AND vString NOT IN ('Text', 'Label', 'Inserts', 'Insert')) THEN
						SET vExceptionType = vString;
					END IF;
				END IF;
			Else	
				Move inRef to inRef.RecoverableException[1];
				SET vPath = vPath || '.*[<]';
			End If;	
		End While;
		
		If inRef.UserException.Insert[3].Text IS NOT NULL Then
			Set errorCode = TRIM('''' FROM inRef.UserException.Insert[3].Text);
		Else
			Set errorCode = 'EAI:'||COALESCE( vExceptionType,'UNKNOWN');
		End If;
			
		Set outRef.errorCode = errorCode;	
		Set outRef.ExceptionLabel = vExceptionLabel;
		Set outRef.exceptionText = InputExceptionList;
		Set outRef.clientIndicator = InputRoot.XML.exceptionReport.clientindicator || '.' || errorCode;
		
		PROPAGATE TO TERMINAL 1;
					
		RETURN FALSE; -- Already returned the message(s)
		
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;


CREATE COMPUTE MODULE SF_Handle_Exception_HTTP_Extract_Message_From_Fault
	-- extract the original replayable message from the detail.originalmessage element of the fault message
	-- and use it as the message to put on the SYS FAILURE queue
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		Declare soap NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
		
		Set OutputRoot = InputRoot.XMLNS.{soap}:Fault.detail.originalmessage;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

